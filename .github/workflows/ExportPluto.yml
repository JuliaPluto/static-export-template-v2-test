# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Export Pluto notebooks
on:
    push:
        branches:
            - main
            - master
    workflow_dispatch:

# When two jobs run in parallel, cancel the older ones, to make sure that the website is generated from the most recent commit.
concurrency:
    group: pluto-export
    cancel-in-progress: true

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

jobs:
    # Build job
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout this repository
              uses: actions/checkout@v3

            - name: Setup Pages
              uses: actions/configure-pages@v3


            - name: Install Julia
              uses: julia-actions/setup-julia@v1
              with:
                  version: '1' # This will automatically pick the latest Julia version

            - name: Cache Julia artifacts & such
              uses: julia-actions/cache@v1
              with:
                  cache-registries: 'true'

            # We set up a folder that Pluto can use to cache exported notebooks. If the notebook file did not change, then Pluto can take the exported file from cache instead of running the notebook.
            - name: Set up notebook state cache
              uses: actions/cache@v3
              with:
                  path: pluto_state_cache
                  key: ${{ runner.os }}-pluto_state_cache-v2-${{ hashFiles('**/Project.toml', '**/Manifest.toml', '.github/workflows/*' ) }}-${{ hashFiles('**/*jl') }}
                  restore-keys: |
                      ${{ runner.os }}-pluto_state_cache-v2-${{ hashFiles('**/Project.toml', '**/Manifest.toml', '.github/workflows/*' ) }}

            - name: Run & export Pluto notebooks
              run: |
                  julia -e 'using Pkg
                    Pkg.activate(mktempdir())
                    Pkg.add([
                      Pkg.PackageSpec(name="PlutoSliderServer", version="0.3.2-0.3"),
                    ])

                    import PlutoSliderServer

                    PlutoSliderServer.github_action(".";
                      Export_cache_dir="pluto_state_cache",
                      Export_baked_notebookfile=false,
                      Export_baked_state=false,
                      # more parameters can go here
                    )'

            - name: Upload artifact
              uses: actions/upload-pages-artifact@v1
              with:
                  path: ./

    # Deployment job
    deploy:
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v1
